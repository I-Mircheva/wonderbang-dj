I"Å(function() {
  var Bar, animate, barCount, barDelay, barPosition, barWidth, bars, c, canvas, createBars, element, imageObj, maxPullDistance, mouse;

  document.addEventListener('turbolinks:load', function() {
    return console.log('It works on each visit!');
  });

  canvas = document.getElementById('canvas');

  element = document.getElementById('container');

  console.log(element);

  Bar = function(x, width, delay) {
    this.position = {
      x: x,
      y: canvas.height
    };
    this.width = width;
    this.timer = delay;
    this.height = 0;
    this.update = function() {
      var distanceBetweenBarAndMouse, maxBarHeightWithSin;
      this.timer += 0.01;
      distanceBetweenBarAndMouse = {
        x: this.position.x + this.width / 2 - mouse.x,
        y: this.position.y - this.height - mouse.y
      };
      if (distanceBetweenBarAndMouse.y < maxPullDistance && distanceBetweenBarAndMouse.x > -this.width / 2 && distanceBetweenBarAndMouse.x < this.width / 2) {
        this.height += (this.position.y - this.height - mouse.y) * 0.12;
      } else if (distanceBetweenBarAndMouse.y < maxPullDistance && distanceBetweenBarAndMouse.x > -this.width * 1.5 && distanceBetweenBarAndMouse.x < this.width * 1.5) {
        this.height += (this.position.y - this.height - mouse.y) * 0.01;
      } else {
        maxBarHeightWithSin = canvas.height / 3;
        this.height -= (this.height - Math.abs(Math.sin(this.timer) * canvas.height / 2.5)) * 0.12;
      }
      this.draw();
    };
    this.draw = function() {
      c.fillStyle = 'hsl(' + Math.abs(Math.sin(this.timer) * 255) + ', 50%, 50%)';
      c.fillRect(this.position.x, canvas.height - this.height, this.width, this.height);
    };
  };

  createBars = function() {
    var barCount, barDelay, barPosition, barWidth, bars, i;
    bars = [];
    barCount = 77;
    barWidth = canvas.width / barCount;
    barPosition = 0;
    barDelay = 0;
    i = 0;
    while (i < barCount) {
      bars.push(new Bar(barPosition, barWidth, barDelay));
      barPosition += barWidth;
      barDelay += 0.2;
      i++;
    }
  };

  animate = function() {
    window.requestAnimationFrame(animate);
    c.fillStyle = 'rgba(0,0,0,0.1)';
    c.fillRect(0, 0, canvas.width, canvas.height);
    c.drawImage(imageObj, 10, 3, canvas.width * 0.1, canvas.height);
    bars.forEach(function(bar) {
      bar.update();
    });
  };

  element.appendChild(canvas);

  canvas.width = 1800;

  canvas.height = element.offsetHeight;

  c = canvas.getContext('2d');

  imageObj = new Image;

  imageObj.onload = function() {
    c.drawImage(imageObj, 0, 0);
  };

  imageObj.src = 'https://media.sundazed.com/media/images/LP-5433-vinyl.png';

  mouse = {
    x: void 0,
    y: void 0
  };

  maxPullDistance = canvas.height;

  canvas.addEventListener('mousemove', function(e) {
    mouse.x = e.clientX;
    mouse.y = e.clientY;
  });

  window.addEventListener('resize', function(e) {
    canvas.width = window.innerWidth;
    canvas.height = element.offsetHeight;
    createBars();
  });

  bars = void 0;

  barCount = void 0;

  barWidth = void 0;

  barPosition = void 0;

  barDelay = void 0;

  createBars();

  animate();

  return;

}).call(this);
:ET